(defwidget media []
  (box
    :class "media-box"
    :space-evenly false

    (box
      :class "media-panel"
      :orientation "vertical"
      :hexpand true
      :style "background-image: url(\"${music.cover}\");"

      (box
        :class "media-info"
        :valign "start"
        :halign "start"
        :orientation "vertical"

        (label :class "media-title" :text "${music.title}" :halign "start")
        (label :class "media-artist" :text "${music.artist}" :halign "start")
      )

      (box
        :class "media-control"
        :valign "end"
        :orientation "vertical"
        :space-evenly false

        (scale
          :class "media-scale"
          :onchange "playerctl position \"$(echo \"{} * $(playerctl metadata mpris:length) / 1000000 / 100\" | bc)\""
          :value {music.position}
        )

        (box
          :class "media-controllers"

          (box
            :halign "start"
            :space-evenly false

            (box
              :class "media-buttons"
              :halign "end"
              :spacing 12
              :space-evenly false

              (button
                :class "media-button-previous"
                :onclick "playerctl -p spotify previous"
                "󰒮"
              )

              (button
                :class "media-button-play-pause"
                :onclick "playerctl -p spotify play-pause"
                "${music.status}"
              )

              (button
                :class "media-button-next"
                :onclick "playerctl -p spotify next"
                "󰒭"
              )
            )
            
            (label
              :class "media-time"
              :text "${music.position_time} / ${music.length}"
            )
          )
        )
      )
    )
  )
)

(defwidget media2 []
  (box
    :class "music-window"
    :space-evenly false
    :style "background-color: ${music.color1}; border: 1px solid ${music.color2};"

    (box
      :class "music-cover-art"
      :style "background-image: url(\"${music.cover}\");"
    )

    (box
      :orientation "v"
      :space-evenly false
      :class "music-box"

      (label
        :class "music-title"
        :wrap true
        :text {music.title}
      )

      (label
        :class "music-artist"
        :wrap true
        :text {music.artist}
      )

      (centerbox
        :halign "center"
        :class "music-button-box icon"
        (button :class "music-button" :onclick "playerctl previous" "󰙤")
        (button :class "music-button" :onclick "playerctl play-pause" {music.status})
        (button :class "music-button" :onclick "playerctl next" "󰙢")
      )

      (box
        :orientation "v"

        (box

          (label
            :xalign 0
            :class "music-time"
            :text {music.position_time}
          )

          (label
            :xalign 1
            :class "music-time"
            :text {music.length}
          )
        )

        (box
          :class "music-bar"

          (scale
            ; doesn't work, looking for other ways
            ; :style "background: linear-gradient(to right, ${music.color1}, ${music.color2});"
            :onchange "playerctl position \"$(echo \"{} * $(playerctl metadata mpris:length) / 1000000 / 100\" | bc)\""
            :value {music.position}
          )
        )
      )
    )
  )
)
