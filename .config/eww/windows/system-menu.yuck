;; Weather widget ;;
(defwidget weather[] 
  (box
    :orientation "h"
    :class "weatherfullbox"
    :space-evenly false

    (box
      :orientation "v"
      :class "weatherbox"
      :space-evenly false
      :hexpand true

      (box
        :orientation "h"
        :class "weathertop"
        :space-evenly false

        (box
          :class "weatherdesc"
          :style "color: ${weather.color};"
          :halign "start"
          :hexpand true
          {weather.desc})
        (box
          :class "weathertemp"
          :halign "end"

          "${weather.temp}°C"))
      
      (box
        :orientation "h"
        :class "weatherbot"
        :space-evenly false

        (box
          :class "weathercity"
          :halign "start"
          :hexpand true
          {weather.city})
        (box
          :class "weathercity"
          :halign "end"

          "Feels like ${weather.feel}°C")))
      
    (box
      :class "weather-icon"
      :style "color: ${weather.color};"
      :halign "center"
      {weather.icon})))

(defwidget system-menu []
  (box
    :class "system-menu-box"
    :space-evenly false
    :orientation "v"
    (box
      :class "top-row"
      :space-evenly false
      (label
        :class "time"
        :text "${time.hour}:${time.minute}")
      (box
        :class "date-box"
        :space-evenly false
        (label
          :class "date"
          :text {time.date})
        (label
          :class "day"
          :text {time.day})))

    (centerbox
      :class "system-row"
      (box
        :class "wifi-box"
        :space-evenly false
        :orientation "v"
        (box
          :class "element icon ${net.class}"
          :space-evenly false
          (button
            :class "wifi-button"
            :onclick "scripts/net toggle"
            {net.icon})
          (label
            :class "separator"
            :text "│")
          (button
            :class "wifi-arrow-btn"
            :onclick "scripts/toggle_window system-menu && nm-connection-editor &"
            ""))
        (label
          :text {net.essid}
          :xalign 0.5
          :limit-width 15))

      (box
        :class "bluetooth-box"
        :space-evenly false
        :orientation "v"
        (box
          :class "element icon ${bluetooth.class}"
          :space-evenly false
          (button
            :class "bluetooth-button"
            :onclick "scripts/bluetooth toggle"
            {bluetooth.icon})
          (label
            :class "separator"
            :text "│")
          (button
            :class "bluetooth-arrow-btn"
            :onclick "scripts/toggle_window system-menu && blueberry"
            ""))
        (label
          :text {bluetooth.text}
          :xalign 0.5
          :tooltip "${bluetooth.text} ${bluetooth.battery}"
          :limit-width 15))

      (box
        :class "airplane-box"
        :space-evenly false
        :orientation "v"
        (box
          :class "element"
          (button
            :class "airplane-button"
            :onclick "scripts/airplane toggle"
            airplane))
        (label
          :text "Airplane Mode"
          :xalign 0.5
          :limit-width 16)))

    (weather)
    (box
      :class "system-info-box"
      :orientation "v"

      (box
        :orientation "h"

        ; cpu
        (box
          :class "sys-box"
          :space-evenly false
          :halign "start"
          (circular-progress
            :value "${EWW_CPU.avg}"
            :class "sys-cpu"
            :thickness 3
            (label
              :text ""
              :style "font-size: 2rem;"
              :class "sys-icon-cpu icon"))
          (box
            :orientation "v"
            :vexpand false
            (label
              :text "cpu"
              :halign "start"
              :class "sys-text-cpu")
            (label
              :text "${round(EWW_CPU.avg,2)}%"
              :halign "start"
              :class "sys-text-sub")
            (label
              :text "${EWW_CPU.cores[0].freq} MHz"
              :halign "start"
              :class "sys-text-sub")))

        ; memory
        (box
          :class "sys-box"
          :space-evenly false
          :halign "end"
          (circular-progress
            :value {memory.percent}
            :class "sys-mem"
            :thickness 3
            (label
              :text ""
              :style "font-family: fontawesome;"
              :class "sys-icon-mem icon"))
          (box
            :orientation "v"
            (label
              :text "memory"
              :halign "start"
              :class "sys-text-mem")
            (label
              :text "${memory.used} | ${memory.total}"
              :halign "start"
              :class "sys-text-sub"))))

      (box
        :orientation "h"

        ; cpu
        (box
          :class "sys-box"
          :space-evenly false
          :halign "start"
          (circular-progress
            :value "${EWW_CPU.avg}"
            :class "sys-cpu"
            :thickness 3
            (label
              :text ""
              :style "font-size: 2rem;"
              :class "sys-icon-cpu icon"))
          (box
            :orientation "v"
            :vexpand false
            (label
              :text "cpu"
              :halign "start"
              :class "sys-text-cpu")
            (label
              :text "${round(EWW_CPU.avg,2)}%"
              :halign "start"
              :class "sys-text-sub")
            (label
              :text "${EWW_CPU.cores[0].freq} MHz"
              :halign "start"
              :class "sys-text-sub")))

        ; memory
        (box
          :class "sys-box"
          :space-evenly false
          :halign "end"
          (circular-progress
            :value {100 * disk.used / disk.total}
            :class "sys-mem"
            :thickness 3
            (label
              :text ""
              :style "font-family: fontawesome;"
              :class "sys-icon-mem icon"))
          (box
            :orientation "v"
            (label
              :text "disk"
              :halign "start"
              :class "sys-text-mem")
            (label
              :text "${memory.used} | ${memory.total}"
              :halign "start"
              :class "sys-text-sub")))))


    (centerbox
      :class "bottom-row"
      (box
        :class "battery-box"
        :space-evenly false
        :halign "start"
        (label
          :class "battery-icon icon"
          :style "color: ${battery.color}"
          :text {battery.icon})
        (label
          :text {EWW_BATTERY["BAT0"].capacity})
        (label
          :class "battery-status"
          :text {battery.status})
        (label
          :class "battery-wattage"
          :text {battery.wattage}))
      (label)
      (box
        :space-evenly false
        :halign "end"
        (button
          :halign "end"
          :class "power-button icon"
          :onclick "wlogout -p layer-shell &"
          "")))))

(defwindow system-menu
  :stacking "fg" 
  :monitor 0
  :geometry (geometry
             :x "0"
             :y "0"
             :width "0%"
             :height "0%"
             :anchor "right top")
  (system-menu))

(defwindow system-menu_dual1
  :stacking "fg" 
  :monitor 0
  :geometry (geometry
             :x "0"
             :y "0"
             :width "0%"
             :height "0%"
             :anchor "right top")
  (system-menu))

(defwindow system-menu_dual2
  :stacking "fg" 
  :monitor 1
  :geometry (geometry
             :x "0"
             :y "0"
             :width "0%"
             :height "0%"
             :anchor "right top")
  (system-menu))

(defwindow system-menu-closer_dual1
  :monitor 0
  :geometry (geometry :width "100%" :height "100%")
  :stacking "fg"
  :focusable false
  (closer :window "system-menu"))

(defwindow system-menu-closer_dual2
  :monitor 1
  :geometry (geometry :width "100%" :height "100%")
  :stacking "fg"
  :focusable false
  (closer :window "system-menu"))
